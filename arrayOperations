#include <iostream>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <vector>

using namespace std; 

void imprimir_matriz(float X[], int m, int n );

void mulMat(float X[],float Y[], int xr, int xy, int yc );

void transMat(float X[], int m, int n );

float determinantTwo(float X[], int n, float determinant);

int main(){
    int k = 2; // meses del ano
    int m = 3; // numero total de anos
    int n = m * k; 
    int nD = 3;

    float* Z =new float [n]; // se declara la serie de datos del ISE
    float* Y =new float [m]; // se declara la serie de datos del PIB disponible
    float* X =new float [n]; // se declara la serie de datos del PIB mensualizado

    float datosISE[] = {2.0, 4.0, 8.0, 10.0, 12.0, 14.0};
    float datosPIB[] = {5.0, 6.0, 7.0};

    float datosPrueba[] = {0, 1, 2, 3, 4, 5, 6 ,7 ,8 ,9 , 10, 11};
    
	  float* A =new float [n*n]; // Matriz A inversa del problema de minimizacion
    float* B =new float[n*m];

    float* M =new float[n*m]; // Matriz multiplicacion de A y C: A*C
    float* T =new float[m*n]; // Matriz transpuesta de C

    float* D = new float[nD*nD];
///////////////////////// Llenando de elementos los arreglos anteriores:

    // se llena el vector Z:
    for(int i=0; i<n; i++)
    {
      Z[i] = datosISE[i];
    }

    // se llena el vector Y:
    for(int i=0; i<m; i++)
    {
      Y[i] = datosPIB[i];
    }

    // se llena la matriz A:
    for(int i=0; i<n; i++){
      for(int j=0; j<n; j++){
        if(i <= j ){
          A[(i*n) + j] = i + 1; 
        } else {
          A[(i*n) + j] = j + 1;
        }
      }
    }

    // se llena la matriz B:
    // for(int i=0; i<n; i++){
    //   for(int j=0; j<m; j++){
    //       B[(i*m) + j] = 1;
    //   }
    // }

     // se llena la matriz B:
    int count = 0; 
    int change = 0; 
    for(int i=0; i<n; i++){
      if(count < k){
      ++ count;
        for(int j=0; j<m; j++){
          if(j == change){
            B[i*m + j] =  1;
          } else {
            B[i*m + j] =  0;
          }
        }
      } else {
        change += 1;
        count = 0; 
        i = i - 1; 
      }
    }

    // se llena la matriz D:
    int sumaD = 0;
    for(int i=0; i<nD; i++){
      for(int j=0; j<nD; j++){
          sumaD++; 
          D[(i*nD) + j] = sumaD;
      }
    }


  printf("Esta es la matriz D: \n");
  imprimir_matriz(D, nD, nD);
  printf("\n");
  float determinante = determinantTwo(D,nD,0);
  printf("El determinante de D es:");
  printf("%5.2f  ", determinante);
  printf("\n");
/////// Imprimiendo los arreglos que se van a usar:

    // imprimimos Z en pantalla:
    printf("Este es el vector Z del ISE mensual: \n");
    for(int j=0; j<n; j++)
    {
      printf("%5.2f  ", Z[j]);
      printf(" \n");
    }

    // imprimimos Y en pantalla:
    printf("Este es el vector Y del PIB trimestral: \n");
    for(int j=0; j<m; j++)
    {
      printf("%5.2f  ", Y[j]);
      printf(" \n");
    }


    // imprimimos A en pantalla:
    printf("Esta es la matriz A^-1 de la minimizacion: \n");
    imprimir_matriz(A, n, n);

    //imprimimos C en pantalla:
    printf("Esta es la matriz B del Lagrangiano: \n");
    imprimir_matriz(B, n, m);


  printf("Esta es la transpuesta de B: \n");
  transMat(B, n, m );
  printf("Esta es la transpuesta de datosPruba: \n");
  transMat(datosPrueba, 4, 3 );
  // printf("Esta es la transpuesta de A: \n");
  // transMat(A, n, n );
  // printf("Esta es la transpuesta de datosIse 2x3: \n");
  // transMat(datosISE, 2, 3 );
  printf("Esta es la multiplicacion A*C: \n");
  mulMat(A,B, n, n, m);


    // liberamos memoria y evitamos fugas:
      delete [] Z;
      delete [] Y;
      delete [] X;
      delete [] A;
      delete [] B;
      delete [] M;
      delete [] T;
      delete [] D;
      
      Z = NULL; 
      Y = NULL;
      X = NULL;
      A = NULL;
      B = NULL;
      M = NULL;
      T = NULL;
      D = NULL; 
}

// Funcion que imprime una mnatriz mxn cin m columnas y n filas
void imprimir_matriz(float X[], int m, int n ){
  for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
      printf("%5.2f  ", X[(i*n) + j]);
    }
    printf("\n");
  }
  
}

void mulMat(float X[],float Y[], int xr, int xy, int yc ){
  float* MM =new float[xr*yc];
    for(int i=0; i<xr; i++){
    for(int j=0; j<yc; j++){
        float accumulator = 0;
        for(int k=0; k<xy; k++){
           accumulator += X[(i*xy) + k]*Y[(k*yc) + j]; 
        } 
        MM[(i*yc) + j] = accumulator;
      }
    }
    imprimir_matriz(MM, xr, yc); 
    transMat(MM, xr, yc);    
    delete [] MM;
    MM = NULL; 
}


// Funcion para transponer una matriz cualquiera de tamano "xr X xc"
void transMat(float X[], int m, int n ){
  printf("\nEsta es su matriz:\n \n");
  imprimir_matriz(X,m,n);
  
  float* TM =new float[m*n];
  for(int i=0; i<m; i++){
    for(int j=0; j<n; j++){
      //printf("(%d,%d) %d %d %d /  ",i,j,((n*i) + j), ((m*j)+i),1);
      TM[(m*j) + i] = X[(n*i) + j];
    }
    
  }
// imprimimos TM en pantalla:
printf("Esta es su matriz traspuesta T: \n");
  imprimir_matriz(TM,n,m);

  delete [] TM;
  TM = NULL;
}


float determinantTwo(float X[], int n, float determinant){
  // float determinant = 0; 
  printf("Este es n: \n");
  printf("%5d  ", n);
  if(n == 2){
  determinant += X[0]*X[3] - X[2]*X[1];
  } else {
    printf("La matriz D no es 2x2. \n");
    // float sum = 0;
    // for(int i; i<n; i++){
      for(int j=0; j<n; j++){
        float* TD = new float[(n-1)*(n-1)];
        int x = 0; 
        for(int l=1; l<n; l++){
          int y = 0; 
            for(int m=0; m<n; m++){
            if((m == j))
            continue;
              TD[x*(n-1) + y ] = X[l*n + m ];
            y++;
            }
            x++;
        }
        printf("Esta es la submatriz TD para j =");
        printf("%5d  ", j);
        printf(": \n");
        imprimir_matriz(TD,n-1,n-1);
        determinant += pow(-1, 1+j)*X[j]*determinantTwo(TD,n-1,determinant);
        delete [] TD;
        TD = NULL; 
      }
    // }
  }
  // printf("El determinante es:");
  // printf("%5.2f  ", determinant);
  // printf("\n");
  return determinant; 
}
