#include<iostream>
#include<Eigen/Dense>
#include<vector>
#include<chrono>

using namespace std;
using namespace Eigen;


void imprimir_matriz(const MatrixXf& X);

int main()
{
// Start measuring time
    auto start = chrono::high_resolution_clock::now();

    int k = 3; // meses por período (trimestres)
    int m = 72; // número total de años (trimestres, en este caso 8, datos para 2 años)
    int n = m * k;

    VectorXf Z(n); // serie de datos del ISE
    VectorXf Y(m); // serie de datos del PIB disponible

    //data:
float datosISE[] = {
  60.1,         //ano 2005
  61.6,         //ano 2005
  62.2,         //ano 2005
  63.1,         //ano 2005
  62.7,         //ano 2005
  63.6,         //ano 2005
  63.9,         //ano 2005
  65.2,         //ano 2005
  65.8,         //ano 2005
  66.0,         //ano 2005
  68.6,         //ano 2005
  73.7,         //ano 2005
  62.6,               //ano 2006
  64.7,               //ano 2006
  66.8,               //ano 2006
  64.4,               //ano 2006
  66.9,               //ano 2006
  66.7,               //ano 2006
  68.5,               //ano 2006
  69.8,               //ano 2006
  71.2,               //ano 2006
  71.1,               //ano 2006
  74.5,               //ano 2006
  77.4,               //ano 2006
  66.4,         //ano 2007
  68.9,         //ano 2007
  71.1,         //ano 2007
  68.3,         //ano 2007
  71.2,         //ano 2007
  71.7,         //ano 2007
  72.8,         //ano 2007
  74.0,         //ano 2007
  75.3,         //ano 2007
  75.6,         //ano 2007
  78.9,         //ano 2007
  82.3,         //ano 2007
  70.7,                //ano 2008
  73.3,                //ano 2008
  72.2,                //ano 2008
  73.3,                //ano 2008
  73.7,                //ano 2008
  73.9,                //ano 2008
  76.1,                //ano 2008
  76.1,                //ano 2008
  77.2,                //ano 2008
  76.9,                //ano 2008
  77.8,                //ano 2008
  82.4,                //ano 2008
  69.7,         //ano 2009
  72.5,         //ano 2009
  74.5,         //ano 2009
  72.9,         //ano 2009
  75.2,         //ano 2009
  74.8,         //ano 2009
  77.8,         //ano 2009
  76.3,         //ano 2009
  77.8,         //ano 2009
  78.1,         //ano 2009
  80.8,         //ano 2009
  86.1,         //ano 2009
  72.4,                 //ano 2010
  74.9,                 //ano 2010
  78.0,                 //ano 2010
  76.1,                 //ano 2010
  78.5,                 //ano 2010
  78.4,                 //ano 2010
  79.5,                 //ano 2010
  79.8,                 //ano 2010
  81.1,                 //ano 2010
  81.7,                 //ano 2010
  84.9,                 //ano 2010
  90.9,                 //ano 2010
  77.7,         //ano 2011        
  79.2,         //ano 2011        
  83.1,         //ano 2011        
  80.6,         //ano 2011        
  83.7,         //ano 2011        
  83.7,         //ano 2011        
  85.1,         //ano 2011        
  87.0,         //ano 2011        
  86.5,         //ano 2011        
  86.8,         //ano 2011        
  90.7,         //ano 2011        
  95.4,         //ano 2011        
  81.9,                 //ano 2012
  84.7,                 //ano 2012
  87.8,                 //ano 2012
  84.2,                 //ano 2012
  88.0,                 //ano 2012
  87.9,                 //ano 2012
  88.2,                 //ano 2012
  87.3,                 //ano 2012
  88.8,                 //ano 2012
  88.7,                 //ano 2012
  93.3,                 //ano 2012
  98.0,                 //ano 2012
  85.4,         //ano 2013
  86.6,         //ano 2013
  88.6,         //ano 2013
  90.0,         //ano 2013
  92.5,         //ano 2013
  92.0,         //ano 2013
  94.4,         //ano 2013
  93.2,         //ano 2013
  94.0,         //ano 2013
  94.1,         //ano 2013
  99.1,         //ano 2013
  105.2,        //ano 2013
  89.4,                 //ano 2014
  92.9,                 //ano 2014
  95.7,                 //ano 2014
  92.3,                 //ano 2014
  95.6,                 //ano 2014
  95.4,                 //ano 2014
  97.6,                 //ano 2014
  97.5,                 //ano 2014
  98.4,                 //ano 2014
  98.3,                 //ano 2014
  102.0,                //ano 2014
  109.1,                //ano 2014
  92.0,         //ano 2015
  95.2,         //ano 2015
  98.6,         //ano 2015
  95.5,         //ano 2015
  98.9,         //ano 2015
  99.3,         //ano 2015
  102.0,        //ano 2015
  101.2,        //ano 2015
  101.1,        //ano 2015
  100.6,        //ano 2015
  104.4,        //ano 2015
  111.1,        //ano 2015
  93.6,                 //ano 2016
  99.4,                 //ano 2016
  99.8,                 //ano 2016
  98.3,                 //ano 2016
  100.7,                //ano 2016
  101.6,                //ano 2016
  100.4,                //ano 2016
  104.6,                //ano 2016
  103.5,                //ano 2016
  101.9,                //ano 2016
  107.6,                //ano 2016
  114.7,                //ano 2016
  95.1,         //ano 2017
  99.1,         //ano 2017
  102.3,        //ano 2017
  98.0,         //ano 2017
  102.1,        //ano 2017
  104.6,        //ano 2017
  104.1,        //ano 2017
  105.7,        //ano 2017
  104.0,        //ano 2017
  103.1,        //ano 2017
  108.6,        //ano 2017
  116.7,        //ano 2017
  96.5,                 //ano 2018
  100.7,                //ano 2018
  104.0,                //ano 2018
  102.0,                //ano 2018
  104.3,                //ano 2018
  106.4,                //ano 2018
  107.3,                //ano 2018
  109.0,                //ano 2018
  106.6,                //ano 2018
  106.7,                //ano 2018
  112.2,                //ano 2018
  118.8,                //ano 2018
  100.0,        //ano 2019
  104.3,        //ano 2019
  107.5,        //ano 2019
  104.4,        //ano 2019
  108.8,        //ano 2019
  109.1,        //ano 2019
  112.0,        //ano 2019
  111.8,        //ano 2019
  108.7,        //ano 2019
  110.0,        //ano 2019
  114.7,        //ano 2019
  122.4,        //ano 2019
  104.0,                //ano 2020
  108.5,                //ano 2020
  100.9,                //ano 2020
  83.3,                 //ano 2020
  89.6,                 //ano 2020
  95.3,                 //ano 2020
  99.9,                 //ano 2020
  100.1,                //ano 2020
  101.6,                //ano 2020
  104.5,                //ano 2020
  109.9,                //ano 2020
  119.2,                //ano 2020
  100.2,        //ano 2021
  104.9,        //ano 2021
  112.1,        //ano 2021
  104.7,        //ano 2021
  102.1,        //ano 2021
  110.2,        //ano 2021
  113.1,        //ano 2021
  112.2,        //ano 2021
  115.6,        //ano 2021
  115.8,        //ano 2021
  122.3,        //ano 2021
  132.0,        //ano 2021
  108.7,                //ano 2022  
  113.0,                //ano 2022  
  119.7,                //ano 2022  
  116.4,                //ano 2022  
  119.6,                //ano 2022  
  119.8,                //ano 2022  
  121.1,                //ano 2022  
  122.7,                //ano 2022  
  122.0,                //ano 2022  
  120.4,                //ano 2022  
  125.1,                //ano 2022  
  133.6,                //ano 2022  
};
float datosPIB[] = {
  121278.0,     //ano 2005
  125664.0,     //ano 2005
  129103.0,     //ano 2005
  138808.0,     //ano 2005
  128999.0,         //ano 2006
  132349.0,         //ano 2006
  138998.0,         //ano 2006
  149088.0,         //ano 2006
  137656.0,     //ano 2007
  141436.0,     //ano 2007
  148529.0,     //ano 2007
  158835.0,     //ano 2007
  144780.0,         //ano 2008
  148196.0,         //ano 2008
  153462.0,         //ano 2008
  159275.0,         //ano 2008
  145004.0,     //ano 2009
  149230.0,     //ano 2009
  154285.0,     //ano 2009
  164097.0,     //ano 2009
  150639.0,         //ano 2010
  156125.0,         //ano 2010
  160529.0,         //ano 2010
  172858.0,         //ano 2010
  160881.0,     //ano 2011
  166721.0,     //ano 2011
  173241.0,     //ano 2011
  183785.0,     //ano 2011
  170757.0,         //ano 2012
  174814.0,         //ano 2012
  177146.0,         //ano 2012
  188698.0,         //ano 2012
  174828.0,     //ano 2013
  184203.0,     //ano 2013
  188215.0,     //ano 2013
  200694.0,     //ano 2013
  186384.0,         //ano 2014
  190502.0,         //ano 2014
  196460.0,         //ano 2014
  208244.0,         //ano 2014
  191649.0,     //ano 2015
  197013.0,     //ano 2015
  203479.0,     //ano 2015
  212552.0,     //ano 2015
  196203.0,         //ano 2016
  201220.0,         //ano 2016
  206654.0,         //ano 2016
  217412.0,         //ano 2016
  198332.0,     //ano 2017
  203793.0,     //ano 2017
  210153.0,     //ano 2017
  220378.0,     //ano 2017
  201621.0,         //ano 2018
  209419.0,         //ano 2018
  216260.0,         //ano 2018
  226708.0,         //ano 2018
  208704.0,     //ano 2019
  215914.0,     //ano 2019
  223111.0,     //ano 2019
  233494.0,     //ano 2019
  210058.0,         //ano 2020
  179621.0,         //ano 2020
  202591.0,         //ano 2020
  225044.0,         //ano 2020
  213149.0,     //ano 2021
  213543.0,     //ano 2021
  230099.0,     //ano 2021
  250561.0,     //ano 2021
  229842.0,         //ano 2022
  239763.0,         //ano 2022
  247968.0,         //ano 2022
  257792.0,         //ano 2022
};

	float* Aold =new float [n*n]; // Matriz A inversa del problema de minimizacion
    float* Bold =new float[n*m]; //Matriz de ceros y unos


    // Llenar los vectores Z y Y aquí...
    // Fill the Eigen vector with the data
    for (int i = 0; i < n; ++i) {
        Z(i) = datosISE[i];
    }

    for (int i = 0; i < m; ++i) {
        Y(i) = datosPIB[i];
    }


    ////////////////////////////

    // MatrixXf A = MatrixXf::Zero(n, n);
    // MatrixXf B = MatrixXf::Zero(n, m);

    // Llenar las matrices A y B aquí...
// se llena la matriz Aold:
    for(int i=0; i<n; i++){
      for(int j=0; j<n; j++){
        if(i <= j ){
          Aold[(i*n) + j] = i + 1; 
        } else {
          Aold[(i*n) + j] = j + 1;
        }
      }
    }


     // se llena la matriz Bold:
   int count = 0;
    int change = 0;

    for (int i = 0; i < n; i++) {
        if (count < k) {
            ++count;
            for (int j = 0; j < m; j++) {
                if (j == change) {
                    Bold[i * m + j] = 1.0f;
                } else {
                    Bold[i * m + j] = 0.0f;
                }
            }
        } else {
            change += 1;
            count = 0;
            i = i - 1;
        }
    }

 for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      printf("%5.2f  ", Bold[(i*m) + j]);
    }
    printf("\n");
  }

    Eigen::Map<Eigen::MatrixXf> A(Aold, n, n);
    // Eigen::Map<Eigen::MatrixXf> B(Bold, n, m);

    Eigen::MatrixXf B(n, m);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            B(i, j) = Bold[i * m + j];
        }
    }

    //////////////////////////////

    MatrixXf AB = A * B;
    MatrixXf transB = B.transpose();
    MatrixXf BtAB = transB * AB;

    // Calcular el determinante de BtAB
    float determinanteBtAB = BtAB.determinant();

    MatrixXf invBtAB = BtAB.inverse();
    MatrixXf C = AB * invBtAB;

    MatrixXf BtZ = transB * Z;
    VectorXf R = Y - BtZ;
    VectorXf CR = C * R;
    VectorXf X = Z + CR;

    // Imprimir resultados
    cout << "Este es el vector Z del ISE mensual:" << endl;
    imprimir_matriz(Z);

    cout << "Este es el vector Y del PIB trimestral:" << endl;
    imprimir_matriz(Y);

    cout << "Esta es la matriz A^-1 de la minimización:" << endl;
    imprimir_matriz(A);

    cout << "Esta es la matriz B del Lagrangiano:" << endl;
    imprimir_matriz(B);

    // cout << "Esta es la matriz AB:" << endl;
    // imprimir_matriz(AB);

    // cout << "Esta es la matriz B transpuesta AB:" << endl;
    // imprimir_matriz(BtAB);

    // cout << "Esta es la matriz inversa de B transpuesta AB:" << endl;
    // imprimir_matriz(invBtAB);

    cout << "Este es el vector X resultante:" << endl;
    imprimir_matriz(X);

    // Stop measuring time and calculate the elapsed time
    auto stop = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::milliseconds>(stop - start);
    cout << "Tiempo medido: " << duration.count() << " milisegundos." << endl;



    // Matrix<float, 3,3> matrixA;
    // matrixA.setZero();
    // cout<<matrixA<<endl;

    
      delete [] Aold;
      delete [] Bold;
    Aold = NULL;
    Bold = NULL;

    return 0; 
}

void imprimir_matriz(const MatrixXf& X) {
    cout << X << endl;
}
