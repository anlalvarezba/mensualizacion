#include <iostream>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <vector>
#include <chrono>

using namespace std; 

void imprimir_matriz(float X[], int m, int n );

float* mulMat(float X[],float Y[], int xr, int xy, int yc );

float* transMat(float X[], int m, int n );

float determinantTwo(float X[], int n);

float* adjMat(float X[], int n);

float* divEscMat(float X[], float divisor, int n, int m);

float* restVect(float X[], float Y[], int n);
float* sumVect(float X[], float Y[], int n);

int main(){

// Start measuring time
auto start = std::chrono::high_resolution_clock::now();

    int k = 3; // meses del ano (meses por periodo 3, es un trimestre)
    int m = 68; // numero total de anos (de trimestres, en este caso 8, se tiene los datos para 2 anos)
    int n = m * k;
    
    float* Z =new float [n]; // se declara la serie de datos del ISE
    float* Y =new float [m]; // se declara la serie de datos del PIB disponible

//////////////////////////////ANO 1
float datosISE[] = {
  60.1,         //ano 2005
  61.6,         //ano 2005
  62.2,         //ano 2005
  63.1,         //ano 2005
  62.7,         //ano 2005
  63.6,         //ano 2005
  63.9,         //ano 2005
  65.2,         //ano 2005
  65.8,         //ano 2005
  66.0,         //ano 2005
  68.6,         //ano 2005
  73.7,         //ano 2005
  62.6,               //ano 2006
  64.7,               //ano 2006
  66.8,               //ano 2006
  64.4,               //ano 2006
  66.9,               //ano 2006
  66.7,               //ano 2006
  68.5,               //ano 2006
  69.8,               //ano 2006
  71.2,               //ano 2006
  71.1,               //ano 2006
  74.5,               //ano 2006
  77.4,               //ano 2006
  66.4,         //ano 2007
  68.9,         //ano 2007
  71.1,         //ano 2007
  68.3,         //ano 2007
  71.2,         //ano 2007
  71.7,         //ano 2007
  72.8,         //ano 2007
  74.0,         //ano 2007
  75.3,         //ano 2007
  75.6,         //ano 2007
  78.9,         //ano 2007
  82.3,         //ano 2007
  70.7,                //ano 2008
  73.3,                //ano 2008
  72.2,                //ano 2008
  73.3,                //ano 2008
  73.7,                //ano 2008
  73.9,                //ano 2008
  76.1,                //ano 2008
  76.1,                //ano 2008
  77.2,                //ano 2008
  76.9,                //ano 2008
  77.8,                //ano 2008
  82.4,                //ano 2008
  69.7,         //ano 2009
  72.5,         //ano 2009
  74.5,         //ano 2009
  72.9,         //ano 2009
  75.2,         //ano 2009
  74.8,         //ano 2009
  77.8,         //ano 2009
  76.3,         //ano 2009
  77.8,         //ano 2009
  78.1,         //ano 2009
  80.8,         //ano 2009
  86.1,         //ano 2009
  72.4,                 //ano 2010
  74.9,                 //ano 2010
  78.0,                 //ano 2010
  76.1,                 //ano 2010
  78.5,                 //ano 2010
  78.4,                 //ano 2010
  79.5,                 //ano 2010
  79.8,                 //ano 2010
  81.1,                 //ano 2010
  81.7,                 //ano 2010
  84.9,                 //ano 2010
  90.9,                 //ano 2010
  77.7,         //ano 2011        
  79.2,         //ano 2011        
  83.1,         //ano 2011        
  80.6,         //ano 2011        
  83.7,         //ano 2011        
  83.7,         //ano 2011        
  85.1,         //ano 2011        
  87.0,         //ano 2011        
  86.5,         //ano 2011        
  86.8,         //ano 2011        
  90.7,         //ano 2011        
  95.4,         //ano 2011        
  81.9,                 //ano 2012
  84.7,                 //ano 2012
  87.8,                 //ano 2012
  84.2,                 //ano 2012
  88.0,                 //ano 2012
  87.9,                 //ano 2012
  88.2,                 //ano 2012
  87.3,                 //ano 2012
  88.8,                 //ano 2012
  88.7,                 //ano 2012
  93.3,                 //ano 2012
  98.0,                 //ano 2012
  85.4,         //ano 2013
  86.6,         //ano 2013
  88.6,         //ano 2013
  90.0,         //ano 2013
  92.5,         //ano 2013
  92.0,         //ano 2013
  94.4,         //ano 2013
  93.2,         //ano 2013
  94.0,         //ano 2013
  94.1,         //ano 2013
  99.1,         //ano 2013
  105.2,        //ano 2013
  89.4,                 //ano 2014
  92.9,                 //ano 2014
  95.7,                 //ano 2014
  92.3,                 //ano 2014
  95.6,                 //ano 2014
  95.4,                 //ano 2014
  97.6,                 //ano 2014
  97.5,                 //ano 2014
  98.4,                 //ano 2014
  98.3,                 //ano 2014
  102.0,                //ano 2014
  109.1,                //ano 2014
  92.0,         //ano 2015
  95.2,         //ano 2015
  98.6,         //ano 2015
  95.5,         //ano 2015
  98.9,         //ano 2015
  99.3,         //ano 2015
  102.0,        //ano 2015
  101.2,        //ano 2015
  101.1,        //ano 2015
  100.6,        //ano 2015
  104.4,        //ano 2015
  111.1,        //ano 2015
  93.6,                 //ano 2016
  99.4,                 //ano 2016
  99.8,                 //ano 2016
  98.3,                 //ano 2016
  100.7,                //ano 2016
  101.6,                //ano 2016
  100.4,                //ano 2016
  104.6,                //ano 2016
  103.5,                //ano 2016
  101.9,                //ano 2016
  107.6,                //ano 2016
  114.7,                //ano 2016
  95.1,         //ano 2017
  99.1,         //ano 2017
  102.3,        //ano 2017
  98.0,         //ano 2017
  102.1,        //ano 2017
  104.6,        //ano 2017
  104.1,        //ano 2017
  105.7,        //ano 2017
  104.0,        //ano 2017
  103.1,        //ano 2017
  108.6,        //ano 2017
  116.7,        //ano 2017
  96.5,                 //ano 2018
  100.7,                //ano 2018
  104.0,                //ano 2018
  102.0,                //ano 2018
  104.3,                //ano 2018
  106.4,                //ano 2018
  107.3,                //ano 2018
  109.0,                //ano 2018
  106.6,                //ano 2018
  106.7,                //ano 2018
  112.2,                //ano 2018
  118.8,                //ano 2018
  100.0,        //ano 2019
  104.3,        //ano 2019
  107.5,        //ano 2019
  104.4,        //ano 2019
  108.8,        //ano 2019
  109.1,        //ano 2019
  112.0,        //ano 2019
  111.8,        //ano 2019
  108.7,        //ano 2019
  110.0,        //ano 2019
  114.7,        //ano 2019
  122.4,        //ano 2019
  104.0,                //ano 2020
  108.5,                //ano 2020
  100.9,                //ano 2020
  83.3,                 //ano 2020
  89.6,                 //ano 2020
  95.3,                 //ano 2020
  99.9,                 //ano 2020
  100.1,                //ano 2020
  101.6,                //ano 2020
  104.5,                //ano 2020
  109.9,                //ano 2020
  119.2,                //ano 2020
  100.2,        //ano 2021
  104.9,        //ano 2021
  112.1,        //ano 2021
  104.7,        //ano 2021
  102.1,        //ano 2021
  110.2,        //ano 2021
  113.1,        //ano 2021
  112.2,        //ano 2021
  115.6,        //ano 2021
  115.8,        //ano 2021
  122.3,        //ano 2021
  132.0,        //ano 2021
  108.7,                //ano 2022  
  113.0,                //ano 2022  
  119.7,                //ano 2022  
  116.4,                //ano 2022  
  119.6,                //ano 2022  
  119.8,                //ano 2022  
  121.1,                //ano 2022  
  122.7,                //ano 2022  
  122.0,                //ano 2022  
  120.4,                //ano 2022  
  125.1,                //ano 2022  
  133.6,                //ano 2022  
};

float datosPIB[] = {
  121278.0,     //ano 2005
  125664.0,     //ano 2005
  129103.0,     //ano 2005
  138808.0,     //ano 2005
  128999.0,         //ano 2006
  132349.0,         //ano 2006
  138998.0,         //ano 2006
  149088.0,         //ano 2006
  137656.0,     //ano 2007
  141436.0,     //ano 2007
  148529.0,     //ano 2007
  158835.0,     //ano 2007
  144780.0,         //ano 2008
  148196.0,         //ano 2008
  153462.0,         //ano 2008
  159275.0,         //ano 2008
  145004.0,     //ano 2009
  149230.0,     //ano 2009
  154285.0,     //ano 2009
  164097.0,     //ano 2009
  150639.0,         //ano 2010
  156125.0,         //ano 2010
  160529.0,         //ano 2010
  172858.0,         //ano 2010
  160881.0,     //ano 2011
  166721.0,     //ano 2011
  173241.0,     //ano 2011
  183785.0,     //ano 2011
  170757.0,         //ano 2012
  174814.0,         //ano 2012
  177146.0,         //ano 2012
  188698.0,         //ano 2012
  174828.0,     //ano 2013
  184203.0,     //ano 2013
  188215.0,     //ano 2013
  200694.0,     //ano 2013
  186384.0,         //ano 2014
  190502.0,         //ano 2014
  196460.0,         //ano 2014
  208244.0,         //ano 2014
  191649.0,     //ano 2015
  197013.0,     //ano 2015
  203479.0,     //ano 2015
  212552.0,     //ano 2015
  196203.0,         //ano 2016
  201220.0,         //ano 2016
  206654.0,         //ano 2016
  217412.0,         //ano 2016
  198332.0,     //ano 2017
  203793.0,     //ano 2017
  210153.0,     //ano 2017
  220378.0,     //ano 2017
  201621.0,         //ano 2018
  209419.0,         //ano 2018
  216260.0,         //ano 2018
  226708.0,         //ano 2018
  208704.0,     //ano 2019
  215914.0,     //ano 2019
  223111.0,     //ano 2019
  233494.0,     //ano 2019
  210058.0,         //ano 2020
  179621.0,         //ano 2020
  202591.0,         //ano 2020
  225044.0,         //ano 2020
  213149.0,     //ano 2021
  213543.0,     //ano 2021
  230099.0,     //ano 2021
  250561.0,     //ano 2021
  229842.0,         //ano 2022
  239763.0,         //ano 2022
  247968.0,         //ano 2022
  257792.0,         //ano 2022
};


	  float* A =new float [n*n]; // Matriz A inversa del problema de minimizacion
    float* B =new float[n*m]; //Matriz de ceros y unos
///////////////////////// Llenando de elementos los arreglos anteriores:

    // se llena el vector Z:
    for(int i=0; i<n; i++)
    {
      Z[i] = datosISE[i];
    }

    // se llena el vector Y:
    for(int i=0; i<m; i++)
    {
      Y[i] = datosPIB[i];
    }

    // se llena la matriz A:
    for(int i=0; i<n; i++){
      for(int j=0; j<n; j++){
        if(i <= j ){
          A[(i*n) + j] = i + 1; 
        } else {
          A[(i*n) + j] = j + 1;
        }
      }
    }


     // se llena la matriz B:
    int count = 0; 
    int change = 0; 
    for(int i=0; i<n; i++){
      if(count < k){
      ++ count;
        for(int j=0; j<m; j++){
          if(j == change){
            B[i*m + j] =  1;
          } else {
            B[i*m + j] =  0;
          }
        }
      } else {
        change += 1;
        count = 0; 
        i = i - 1; 
      }
    }


    float* AB = mulMat(A,B, n, n, m); //Matriz resultado de la multiplicacion de A inversa y B
    float* transB = transMat(B, n, m ); //Matriz transpuesta de B
    float* BtAB = mulMat(transB, AB, m, n, m); //Matriz resultado de la multiplicacion de B transpuesta y A inversa B
    float* adjBtAB = adjMat(BtAB, m); //Matriz adjunta de BtAB
    float* transAdjBtAB = transMat(adjBtAB, m, m); //Matriz transpuesta de adjBtAB
    
    float determinanteBtAB = determinantTwo(BtAB, m); //determinante de la matriz BtAB
    
    float* invBtAB = divEscMat(transAdjBtAB, determinanteBtAB, m, m); //Matriz inversa de la matriz BtAB
    float* C = mulMat(AB, invBtAB, n, m, m); //Matriz resultado de la multiplicacion de A inversa B y invBtAB

    float* BtZ = mulMat(transB, Z, m, n, 1);
    float* R = restVect(Y, BtZ, m);
    float* CR = mulMat(C, R, n, m, 1);

    float* X = sumVect(Z, CR, n); // se declara la serie de datos del PIB mensualizado

    // imprimimos Z en pantalla:
    printf("Este es el vector Z del ISE mensual: \n");
    for(int j=0; j<n; j++)
    {
      printf("%5.2f  ", Z[j]);
      printf(" \n");
    }

    // imprimimos Y en pantalla:
    printf("Este es el vector Y del PIB trimestral: \n");
    for(int j=0; j<m; j++)
    {
      printf("%5.2f  ", Y[j]);
      printf(" \n");
    }


    // imprimimos A en pantalla:
    printf("Esta es la matriz A^-1 de la minimizacion: \n");
    imprimir_matriz(A, n, n);

    //imprimimos B en pantalla:
    printf("Esta es la matriz B del Lagrangiano: \n");
    imprimir_matriz(B, n, m);

    //imprimimos AB en pantalla:
    printf("Esta es la matriz AB: \n");
    imprimir_matriz(AB, n, m);

    //imprimimos BtranspuestaAB en pantalla:
    printf("Esta es la matriz BtranspuestaAB: \n");
    imprimir_matriz(BtAB, m, m);

    //imprimimos la inversa de BtranspuestaAB en pantalla:
    printf("Esta es la matriz inversa de BtranspuestaAB: \n");
    imprimir_matriz(invBtAB, m, m);

  float* comprobacioninvBtAB = mulMat(invBtAB, BtAB, m, m, m);

  // Stop measuring time and calculate the elapsed time
  auto stop = std::chrono::high_resolution_clock::now();

  printf("Esta es la comprobacion de la matriz inversa de BtranspuestaAB: \n");
  imprimir_matriz(comprobacioninvBtAB, m, m);

  printf("Esta es la matriz C: \n");
  imprimir_matriz(C, n, m); 

  printf("Esta es el vector BtZ: \n");
  imprimir_matriz(BtZ, m, 1);

  printf("Esta es el vector R: \n");
  imprimir_matriz(R, m, 1);

  printf("Esta es el vector CR: \n");
  imprimir_matriz(CR, m, 1);

  printf("Esta es el vector X: \n");
  imprimir_matriz(X, n, 1);

  auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(stop - start); 
  printf("Time medido: %.3f segundos.\n", duration.count() * 1e-9);

    // liberamos memoria y evitamos fugas:
      delete [] Z;
      delete [] Y;
      delete [] A;
      delete [] B;
      delete [] AB; 
      delete [] transB;
      delete [] BtAB; 
      delete [] adjBtAB;
      delete [] transAdjBtAB;
      delete [] invBtAB;
      delete [] C;  
      delete [] BtZ;
      delete [] R; 
      delete [] CR;
      delete [] X; 
      delete [] comprobacioninvBtAB; 
      Z = NULL; 
      Y = NULL;
      A = NULL;
      B = NULL;
      AB = NULL;
      transB = NULL;
      BtAB = NULL; 
      adjBtAB = NULL;
      transAdjBtAB = NULL;
      invBtAB = NULL;  
      C = NULL; 
      BtZ = NULL;
      R = NULL;  
      CR = NULL; 
      X = NULL; 
      comprobacioninvBtAB = NULL; 
}

// Funcion que imprime una mnatriz mxn cin m columnas y n filas
void imprimir_matriz(float X[], int m, int n ){
  for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
      printf("%5.2f  ", X[(i*n) + j]);
    }
    printf("\n");
  }
  
}

float* mulMat(float X[],float Y[], int xr, int xy, int yc ){
  float* MM =new float[xr*yc];
    for(int i=0; i<xr; i++){
    for(int j=0; j<yc; j++){
        float accumulator = 0;
        for(int k=0; k<xy; k++){
           accumulator += X[(i*xy) + k]*Y[(k*yc) + j]; 
        } 
        MM[(i*yc) + j] = accumulator;
      }
    }
    return MM; 
}


// Funcion para transponer una matriz cualquiera de tamano "m X n"
float* transMat(float X[], int m, int n ){
  
  float* TM =new float[m*n];
  for(int i=0; i<m; i++){
    for(int j=0; j<n; j++){
      TM[(m*j) + i] = X[(n*i) + j];
    }
    
  }

  return TM;
}


float determinantTwo(float X[], int n){
  float determinant = 0; 

  if(n == 2){
  return (X[0]*X[3] - X[2]*X[1]);
  } else {
      for(int j=0; j<n; j++){
        float* TD = new float[(n-1)*(n-1)];
        int x = 0; 
        for(int l=1; l<n; l++){
          int y = 0; 
            for(int m=0; m<n; m++){
            if((m == j))
            continue;
              TD[x*(n-1) + y ] = X[l*n + m ];
            y++;
            }
            x++;
        }
        
        determinant = determinant + (pow(-1, j)*X[j]*determinantTwo(TD,n-1));
        
        delete [] TD;
        TD = NULL; 
      }
  }
  
  return determinant; 
}

float* adjMat(float X[], int n){

  float* ADJ = new float[n*n];

  for (int i = 0; i < n; i++){
    for (int j = 0; j < n; j++){
      float* SUBM = new float[(n-1)*(n-1)];
      int x = 0; 
        for(int l=0; l<n; l++){
          int y = 0;
          if((l == i))
          continue;
            for(int m=0; m<n; m++){
            if((m == j))
            continue;
              SUBM[x*(n-1) + y ] = X[l*n + m ];
            y++;
            }
            x++;
        }

        

  // printf("Esta es su matriz submatriz SUBM ");
  // printf("con i =");
  //     printf("%2d", i);
  // printf("y j =");
  //     printf("%2d", j);
  // printf(" \n");
  // imprimir_matriz(SUBM, n-1, n-1);
  // printf(" \n");

  float determinante = determinantTwo(SUBM,n-1);
  printf("El determinante de SUBM es:");
  printf("%5.2f  ", determinante);
  printf("\n");


        ADJ[i*n + j] = pow(-1, 2 + i + j) * determinante;

        delete [] SUBM;
        SUBM = NULL; 
    }
  }

  return ADJ;
}


float* divEscMat(float X[], float divisor, int n, int m){
  float* newMat = new float[n*m];

  for(int i=0; i<n; i++){
    for(int j=0; j<m; j++){
      newMat[(n*i) + j] = X[(n*i) + j] / divisor;
    }
  }

  return newMat;
}

float* restVect(float X[], float Y[], int n){
  float* newVect = new float[n];
  for(int i=0; i<n; i++){
    newVect[i] = X[i] - Y[i];
  }
  return newVect; 
}

float* sumVect(float X[], float Y[], int n){
  float* totalVect = new float[n];
  for(int i=0; i<n; i++){
    totalVect[i] = X[i] + Y[i];
  }
  return totalVect; 
}
